#!/usr/bin/env perl

use v5.34.0;
use warnings;

sub digits {
    my $n = shift;
    my $digits = 1;
    while ($n >= 10) {
        $n = int($n / 10);
        $digits++;
    }
    return $digits;
}

open my $fh, ">", "generated.go" or die "failed to open: $!";

print $fh <<'END';
// Code generated by generate.pl; DO NOT EDIT.

package tuples
END

for my $n(1..64) {
    say $fh "";
    my $types = join ", ", map { "T$_" } 1..$n;
    say $fh "// Tuple$n is a $n-tuple.";
    say $fh "type Tuple${n}[$types any] struct {";
    my $digits = digits($n);
    for my $i (1..$n) {
        printf $fh "\tV%-*d T%d\n", $digits, $i, $i;
    }
    say $fh "}";
    say $fh "";

    my $args = join ", ", map { "v$_ T$_" } 1..$n;
    my $values = join ", ", map { "v$_" } 1..$n;
    say $fh "// New${n} returns a new $n-tuple.";
    say $fh "func New${n}[$types any]($args) Tuple${n}[$types] {";
    say $fh "	return Tuple${n}[$types]{$values}";
    say $fh "}";
    say $fh "";

    my $fields = join ", ", map { "t.V$_" } 1..$n;
    say $fh "// New${n} returns a new $n-tuple.";
    if ($n == 1) {
        say $fh "func (t Tuple${n}[$types]) Get() $types {";
    } else {
        say $fh "func (t Tuple${n}[$types]) Get() ($types) {";
    }
    say $fh "	return $fields";
    say $fh "}";
}

close($fh);
